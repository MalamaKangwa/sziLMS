// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace sziLMS.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Assignment_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Assignment_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0e491c5-83a7-4c22-a86d-e421eac33aaa"),
                            Assignment_Description = "Define Agile Development",
                            Assignment_Name = "Agile Task 1",
                            CourseId = new Guid("7ead0595-5f85-4134-b687-b24e3436fd33")
                        },
                        new
                        {
                            Id = new Guid("ad44f581-ee0e-4266-94e7-4892196ad9cc"),
                            Assignment_Description = "List 10 Agile Methodologies",
                            Assignment_Name = "Agile Task 1",
                            CourseId = new Guid("7ead0595-5f85-4134-b687-b24e3436fd33")
                        });
                });

            modelBuilder.Entity("Entities.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Course_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Course_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ead0595-5f85-4134-b687-b24e3436fd33"),
                            Course_Description = "Agile Methodologies",
                            Course_Name = "Agile 101"
                        },
                        new
                        {
                            Id = new Guid("45c28d41-5c8b-4974-9236-d3776b649295"),
                            Course_Description = "Best Practices for Requirements Gathering.",
                            Course_Name = "Requirements Analysis"
                        });
                });

            modelBuilder.Entity("Entities.Models.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EnrollmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role_Id")
                        .HasColumnType("int");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f83d1b8c-a270-4542-bec6-f171f8f3f95c"),
                            Role_Id = 1,
                            SectionId = new Guid("df925c94-fabd-4184-a362-04c97e8ba1cf"),
                            UserId = new Guid("3aaa4e0e-d210-4791-bea4-b847ca737678")
                        },
                        new
                        {
                            Id = new Guid("6bdb643b-cf76-4a6b-8941-bed8a02d0cbd"),
                            Role_Id = 1,
                            SectionId = new Guid("df925c94-fabd-4184-a362-04c97e8ba1cf"),
                            UserId = new Guid("e0335745-eb9a-46ca-b70e-fdb0434d54a9")
                        },
                        new
                        {
                            Id = new Guid("a3ee8728-a3c9-4ab3-b8a1-ea9bff10ed02"),
                            Role_Id = 0,
                            SectionId = new Guid("df925c94-fabd-4184-a362-04c97e8ba1cf"),
                            UserId = new Guid("622dc736-4634-4db8-8bb7-a33f6359a4be")
                        });
                });

            modelBuilder.Entity("Entities.Models.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df925c94-fabd-4184-a362-04c97e8ba1cf"),
                            CourseId = new Guid("7ead0595-5f85-4134-b687-b24e3436fd33")
                        },
                        new
                        {
                            Id = new Guid("b6aad12f-51fe-4bb5-a60d-0ba22f236ab3"),
                            CourseId = new Guid("7ead0595-5f85-4134-b687-b24e3436fd33")
                        },
                        new
                        {
                            Id = new Guid("af4715dd-331a-4229-8444-d78fddbdb256"),
                            CourseId = new Guid("45c28d41-5c8b-4974-9236-d3776b649295")
                        });
                });

            modelBuilder.Entity("Entities.Models.Submission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EnrollmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("Submissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b7c5236-9442-4fda-a5db-d621277c5f61"),
                            AssignmentId = new Guid("e0e491c5-83a7-4c22-a86d-e421eac33aaa"),
                            EnrollmentId = new Guid("f83d1b8c-a270-4542-bec6-f171f8f3f95c"),
                            Score = "76%"
                        },
                        new
                        {
                            Id = new Guid("55863227-033c-4056-9a89-4fe5a78abe52"),
                            AssignmentId = new Guid("ad44f581-ee0e-4266-94e7-4892196ad9cc"),
                            EnrollmentId = new Guid("f83d1b8c-a270-4542-bec6-f171f8f3f95c"),
                            Score = "80%"
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3aaa4e0e-d210-4791-bea4-b847ca737678"),
                            Email = "AA@gmail.com",
                            Fname = "Andrew",
                            Lname = "Anderson",
                            Password = "weonder2039"
                        },
                        new
                        {
                            Id = new Guid("e0335745-eb9a-46ca-b70e-fdb0434d54a9"),
                            Email = "BB@gmail.com",
                            Fname = "Brian",
                            Lname = "Banda",
                            Password = "darir7079"
                        },
                        new
                        {
                            Id = new Guid("622dc736-4634-4db8-8bb7-a33f6359a4be"),
                            Email = "AA@gmail.com",
                            Fname = "Andrew",
                            Lname = "Anderson",
                            Password = "weonder2039"
                        });
                });

            modelBuilder.Entity("Entities.Models.Assignment", b =>
                {
                    b.HasOne("Entities.Models.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Enrollment", b =>
                {
                    b.HasOne("Entities.Models.Section", "Section")
                        .WithMany("Enrollments")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Section", b =>
                {
                    b.HasOne("Entities.Models.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Submission", b =>
                {
                    b.HasOne("Entities.Models.Assignment", "Assignment")
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Enrollment", "Enrollment")
                        .WithMany("Submissions")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
